name: "Build and release"

on:
  push:
    tags:
      - "v*"

jobs:
  build_on_macos:
    runs-on: macos-latest

    env:
      ENABLE_NOTARIZE: enable
      APPLEID: ${{ secrets.APPLEID }}
      APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
      TEAMID: ${{ secrets.TEAMID }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Use Node.js v18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x
          cache: npm

      - name: Install modules
        run: npm ci

      - name: Import apple codesign cert
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      - name: Store app-specific password in keychain
        run: |
          security add-generic-password -a $APPLEID -w $APPLEIDPASS -s "AC_PASSWORD"

      - name: Build
        run: npm run build:mac:x64

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: macos-build-artifacts
          path: dist/

  build_on_windows:
    runs-on: windows-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Use Node.js v16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: npm

      - name: Install modules
        run: npm ci

      - name: Build
        run: npm run build:win:x64

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-build-artifact
          path: dist/

  release:
    needs: [build_on_macos, build_on_windows]

    runs-on: ubuntu-latest

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true

      - name: Download macos artifacts
        uses: actions/download-artifact@v2
        id: download_mac
        with:
          name: macos-build-artifacts
          path: macos/

      - name: Upload macos Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.download_mac.outputs.download-path }}/Proxy Doggo Handler.dmg
          asset_name: ProxyDoggoHandler-macos.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Download windows artifacts
        uses: actions/download-artifact@v2
        id: download_win
        with:
          name: windows-build-artifact
          path: windows/

      - name: Upload windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.download_win.outputs.download-path }}/Proxy Doggo Handler.exe
          asset_name: ProxyDoggoHandler-win-portable.exe
          asset_content_type: application/octet-stream
